###########################################################
# Script file: Waveguides_FDE_dataCMLCompiler.lsf
#
# Description: This file can be used to extract the parameters
#	required by the CML Compiler to build a waveguide
#	element.
#
# Copyright 2023, Ansys Inc.
###########################################################
clear;

###########################################################
## User defined parameters
# These are parameters that must be set by the user
###########################################################

## Mode information
# mode_data is saved directly for use with CML Compiler 
# Can be a single number (one mode) or a 2x1 array (two modes)  
mode_numbers = [1;2]; # Numbers of the modes used by the CML Compiler element

## wavelength_data [m]
## Center wavelength for the element built by the CML Compiler
wavelength_data = 1.55e-6; # m

# Temperature data for CML Compiler model 
# These are saved directly for use with CML Compiler (not used in the simulation)
temperature_data = 300; # K
dneff_dT = [0.001; 0.0001];# 1/K

# Additional loss to account for effects not captured in simulation (for example surface roughness)
additional_loss = [300;200]; # dB/m

###########################################################
## Run simulation and extract results
###########################################################
# Assume simulation is already run, extract results from finished simulation
switchtolayout;
setanalysis("wavelength", wavelength_data);
findmodes;

n_modes = length(mode_numbers);
mode_data=cell(length(mode_numbers));

if ((n_modes!=length(mode_data)) or n_modes!=length(dneff_dT) or n_modes!=length(additional_loss)){ # Check that length of arrays is consistent

?"Error: Length of data arrays is not consistent. Check: mode_data, mode_numbers, dneff_dT, additional_loss";

break;

}
neff = loss = ng = D = matrix(n_modes); 

for(mode_ind=1:n_modes){ # Loop over selected modes
    selectmode(mode_numbers(mode_ind));
    setanalysis('track selected mode',1);
    setanalysis('detailed dispersion calculation',1);
    setanalysis('stop wavelength',wavelength_data);
    setanalysis('number of points',1);
    frequencysweep;
    
    ## Extract results from frequency sweep:
    neff(mode_ind) = real(getresult("FDE::data::frequencysweep","neff"));
    loss(mode_ind) = additional_loss(mode_ind) + getresult("FDE::data::frequencysweep","loss"); # dB/m
    ng(mode_ind) = c/getresult("FDE::data::frequencysweep","vg"); # m/s
    D(mode_ind) = getresult("FDE::data::frequencysweep","D"); # s/m^2
}

###########################################################
## Create model source data in CML Compiler format
###########################################################

# General: includes the model description, prefix and notes
general=struct;

general.description='Simulated waveguide - C band'; # Brief description of the model, visible to the end user
general.prefix='WG'; # Appended to element names in INTERCONNECT

general.notes=cell(2); # Notes for the end user
general.notes{1}=struct;
general.notes{1}.property='wavelength_range'; # Name of the note
general.notes{1}.value='C-band (1530 - 1565 nm)'; # Information for the end user
general.notes{2}=struct;
general.notes{2}.property='temperature_range';
general.notes{2}.value='Best accuracy between 273 and 373 K';

# Ports: defines the ports for the element. Generally, this shouldn't need to be changed
ports=struct;

ports.opt_1=struct;
ports.opt_1.dir='Bidirectional'; # Port's directionality - either "Input", "Output" or "Bidirectional"
ports.opt_1.loc=0.5; # Placement of the port on whichever side it's on, as a value between 0 and 1
ports.opt_1.name='opt_1'; # Name of the port, as a string
ports.opt_1.order=1; # Order at which each port is listed in a netlist
ports.opt_1.pos='Left'; # Side of the final model the port will be placed on - either "Left", "Top", "Right", or "Bottom"

ports.opt_2=struct;
ports.opt_2.dir='Bidirectional';
ports.opt_2.loc=0.5;
ports.opt_2.name='opt_2';
ports.opt_2.order=2;
ports.opt_2.pos='Right';

# Parameters that may be visible and editable by the end user
# Possible parameters depend on photonic model
parameters=struct;

parameters.temperature=struct; # Temperature parameter
parameters.temperature.default='%temperature%';

parameters.wg_length=struct; # Waveguide length parameter
parameters.wg_length.annotate=0; # Parameter is annotated in INTERCONNECT schematic (1=true, 0=false)
parameters.wg_length.default=1e-05; # m; Default value of parameter
parameters.wg_length.max=1; # m; Maximum value of parameter
parameters.wg_length.min=0; # m; Minimum value of parameter
parameters.wg_length.name='wg_length'; # Name of parameter
parameters.wg_length.unit='um'; # Units displayed in INTERCONNECT
parameters.wg_length.visible_to_user=1; # Visible to end user (1=true, 0=false)

# Model data: Data used to model the electrical and optical properties of the element
# Required model data depends on photonic model
# Data is included for both mode 1 and mode 2
model_data=struct;

model_data.photonic_model='waveguide_simple';

# Mode information
model_data.mode_data=mode_data;

model_data.mode_data{1}=struct;
model_data.mode_data{1}.ID=1;
model_data.mode_data{1}.name='TE';

model_data.mode_data{2}=struct;
model_data.mode_data{2}.ID=2;
model_data.mode_data{2}.name='TM';

# Waveguide loss
model_data.loss=matrix(2);
model_data.loss(1)=loss(1);
model_data.loss(2)=loss(2);

# Effective index
model_data.neff=matrix(2);
model_data.neff(1)=neff(1);
model_data.neff(2)=neff(2);

# Group index
model_data.ng=matrix(2);
model_data.ng(1)=ng(1);
model_data.ng(2)=ng(2);

# Dispersion parameter
model_data.D=matrix(2); 
model_data.D(1)=D(1);
model_data.D(2)=D(2);

# Sensitivity of effective index to temperature
model_data.dneff_dT=matrix(2);
model_data.dneff_dT(1)=dneff_dT(1);
model_data.dneff_dT(2)=dneff_dT(2);

model_data.temperature=temperature_data;
model_data.wavelength=wavelength_data;

model_data.number_of_taps_estimation='disabled';

# Parameters used by QA scripts
QA=struct;

# Parameters for the QA tests
QA.parameters=struct;

# Wavelength range for the QA tests
QA.parameters.wavelength=struct;
QA.parameters.wavelength.max=1.565e-06; # m
QA.parameters.wavelength.min=1.53e-06; # m

# Relative tolerance for QA tests which verify the different figures of merit of the waveguide
# If the simulated values differ from the values provided within the data file by more than this tolerance,
# the QA tests will fail.
QA.relative_tolerances=struct;
QA.relative_tolerances.delay_time=0.01;
QA.relative_tolerances.loss=1e-06; # dB/m 
QA.relative_tolerances.neff=0.01; 
QA.relative_tolerances.ng=0.5; # m/s

###########################################################
## Export model source data structs to JSON file
###########################################################

jsonsave("wg_strip_straight_c.json", general, ports, parameters, model_data, QA);
            